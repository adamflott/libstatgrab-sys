/* automatically generated by rust-bindgen 0.59.2 */

const _SYS_TYPES_H: u32 = 1;
const _FEATURES_H: u32 = 1;
const _DEFAULT_SOURCE: u32 = 1;
const __GLIBC_USE_ISOC2X: u32 = 0;
const __USE_ISOC11: u32 = 1;
const __USE_ISOC99: u32 = 1;
const __USE_ISOC95: u32 = 1;
const __USE_POSIX_IMPLICITLY: u32 = 1;
const _POSIX_SOURCE: u32 = 1;
const _POSIX_C_SOURCE: u32 = 200809;
const __USE_POSIX: u32 = 1;
const __USE_POSIX2: u32 = 1;
const __USE_POSIX199309: u32 = 1;
const __USE_POSIX199506: u32 = 1;
const __USE_XOPEN2K: u32 = 1;
const __USE_XOPEN2K8: u32 = 1;
const _ATFILE_SOURCE: u32 = 1;
const __WORDSIZE: u32 = 64;
const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
const __SYSCALL_WORDSIZE: u32 = 64;
const __TIMESIZE: u32 = 64;
const __USE_MISC: u32 = 1;
const __USE_ATFILE: u32 = 1;
const __USE_FORTIFY_LEVEL: u32 = 0;
const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
const _STDC_PREDEF_H: u32 = 1;
const __STDC_IEC_559__: u32 = 1;
const __STDC_IEC_559_COMPLEX__: u32 = 1;
const __STDC_ISO_10646__: u32 = 201706;
const __GNU_LIBRARY__: u32 = 6;
const __GLIBC__: u32 = 2;
const __GLIBC_MINOR__: u32 = 34;
const _SYS_CDEFS_H: u32 = 1;
const __glibc_c99_flexarr_available: u32 = 1;
const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
const __HAVE_GENERIC_SELECTION: u32 = 1;
const _BITS_TYPES_H: u32 = 1;
const _BITS_TYPESIZES_H: u32 = 1;
const __OFF_T_MATCHES_OFF64_T: u32 = 1;
const __INO_T_MATCHES_INO64_T: u32 = 1;
const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
const __STATFS_MATCHES_STATFS64: u32 = 1;
const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
const __FD_SETSIZE: u32 = 1024;
const _BITS_TIME64_H: u32 = 1;
const __clock_t_defined: u32 = 1;
const __clockid_t_defined: u32 = 1;
const __time_t_defined: u32 = 1;
const __timer_t_defined: u32 = 1;
const _BITS_STDINT_INTN_H: u32 = 1;
const __BIT_TYPES_DEFINED__: u32 = 1;
const _ENDIAN_H: u32 = 1;
const _BITS_ENDIAN_H: u32 = 1;
const __LITTLE_ENDIAN: u32 = 1234;
const __BIG_ENDIAN: u32 = 4321;
const __PDP_ENDIAN: u32 = 3412;
const _BITS_ENDIANNESS_H: u32 = 1;
const __BYTE_ORDER: u32 = 1234;
const __FLOAT_WORD_ORDER: u32 = 1234;
const LITTLE_ENDIAN: u32 = 1234;
const BIG_ENDIAN: u32 = 4321;
const PDP_ENDIAN: u32 = 3412;
const BYTE_ORDER: u32 = 1234;
const _BITS_BYTESWAP_H: u32 = 1;
const _BITS_UINTN_IDENTITY_H: u32 = 1;
const _SYS_SELECT_H: u32 = 1;
const __sigset_t_defined: u32 = 1;
const __timeval_defined: u32 = 1;
const _STRUCT_TIMESPEC: u32 = 1;
const FD_SETSIZE: u32 = 1024;
const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
const _THREAD_SHARED_TYPES_H: u32 = 1;
const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
const __SIZEOF_PTHREAD_COND_T: u32 = 48;
const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
const __have_pthread_attr_t: u32 = 1;
const _TIME_H: u32 = 1;
const _BITS_TIME_H: u32 = 1;
const CLOCK_REALTIME: u32 = 0;
const CLOCK_MONOTONIC: u32 = 1;
const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
const CLOCK_MONOTONIC_RAW: u32 = 4;
const CLOCK_REALTIME_COARSE: u32 = 5;
const CLOCK_MONOTONIC_COARSE: u32 = 6;
const CLOCK_BOOTTIME: u32 = 7;
const CLOCK_REALTIME_ALARM: u32 = 8;
const CLOCK_BOOTTIME_ALARM: u32 = 9;
const CLOCK_TAI: u32 = 11;
const TIMER_ABSTIME: u32 = 1;
const __struct_tm_defined: u32 = 1;
const __itimerspec_defined: u32 = 1;
const _BITS_TYPES_LOCALE_T_H: u32 = 1;
const _BITS_TYPES___LOCALE_T_H: u32 = 1;
const TIME_UTC: u32 = 1;
type __u_char = ::std::os::raw::c_uchar;
type __u_short = ::std::os::raw::c_ushort;
type __u_int = ::std::os::raw::c_uint;
type __u_long = ::std::os::raw::c_ulong;
type __int8_t = ::std::os::raw::c_schar;
type __uint8_t = ::std::os::raw::c_uchar;
type __int16_t = ::std::os::raw::c_short;
type __uint16_t = ::std::os::raw::c_ushort;
type __int32_t = ::std::os::raw::c_int;
type __uint32_t = ::std::os::raw::c_uint;
type __int64_t = ::std::os::raw::c_long;
type __uint64_t = ::std::os::raw::c_ulong;
type __int_least8_t = __int8_t;
type __uint_least8_t = __uint8_t;
type __int_least16_t = __int16_t;
type __uint_least16_t = __uint16_t;
type __int_least32_t = __int32_t;
type __uint_least32_t = __uint32_t;
type __int_least64_t = __int64_t;
type __uint_least64_t = __uint64_t;
type __quad_t = ::std::os::raw::c_long;
type __u_quad_t = ::std::os::raw::c_ulong;
type __intmax_t = ::std::os::raw::c_long;
type __uintmax_t = ::std::os::raw::c_ulong;
type __dev_t = ::std::os::raw::c_ulong;
type __uid_t = ::std::os::raw::c_uint;
type __gid_t = ::std::os::raw::c_uint;
type __ino_t = ::std::os::raw::c_ulong;
type __ino64_t = ::std::os::raw::c_ulong;
type __mode_t = ::std::os::raw::c_uint;
type __nlink_t = ::std::os::raw::c_ulong;
type __off_t = ::std::os::raw::c_long;
type __off64_t = ::std::os::raw::c_long;
type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __fsid_t {
    __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
type __clock_t = ::std::os::raw::c_long;
type __rlim_t = ::std::os::raw::c_ulong;
type __rlim64_t = ::std::os::raw::c_ulong;
type __id_t = ::std::os::raw::c_uint;
type __time_t = ::std::os::raw::c_long;
type __useconds_t = ::std::os::raw::c_uint;
type __suseconds_t = ::std::os::raw::c_long;
type __suseconds64_t = ::std::os::raw::c_long;
type __daddr_t = ::std::os::raw::c_int;
type __key_t = ::std::os::raw::c_int;
type __clockid_t = ::std::os::raw::c_int;
type __timer_t = *mut ::std::os::raw::c_void;
type __blksize_t = ::std::os::raw::c_long;
type __blkcnt_t = ::std::os::raw::c_long;
type __blkcnt64_t = ::std::os::raw::c_long;
type __fsblkcnt_t = ::std::os::raw::c_ulong;
type __fsblkcnt64_t = ::std::os::raw::c_ulong;
type __fsfilcnt_t = ::std::os::raw::c_ulong;
type __fsfilcnt64_t = ::std::os::raw::c_ulong;
type __fsword_t = ::std::os::raw::c_long;
type __ssize_t = ::std::os::raw::c_long;
type __syscall_slong_t = ::std::os::raw::c_long;
type __syscall_ulong_t = ::std::os::raw::c_ulong;
type __loff_t = __off64_t;
type __caddr_t = *mut ::std::os::raw::c_char;
type __intptr_t = ::std::os::raw::c_long;
type __socklen_t = ::std::os::raw::c_uint;
type __sig_atomic_t = ::std::os::raw::c_int;
type u_char = __u_char;
type u_short = __u_short;
type u_int = __u_int;
type u_long = __u_long;
type quad_t = __quad_t;
type u_quad_t = __u_quad_t;
type fsid_t = __fsid_t;
type loff_t = __loff_t;
type ino_t = __ino_t;
type dev_t = __dev_t;
type gid_t = __gid_t;
type mode_t = __mode_t;
type nlink_t = __nlink_t;
type uid_t = __uid_t;
type off_t = __off_t;
type pid_t = __pid_t;
type id_t = __id_t;
type ssize_t = __ssize_t;
type daddr_t = __daddr_t;
type caddr_t = __caddr_t;
type key_t = __key_t;
type clock_t = __clock_t;
type clockid_t = __clockid_t;
type time_t = __time_t;
type timer_t = __timer_t;
type size_t = ::std::os::raw::c_ulong;
type ulong = ::std::os::raw::c_ulong;
type ushort = ::std::os::raw::c_ushort;
type uint = ::std::os::raw::c_uint;
type u_int8_t = __uint8_t;
type u_int16_t = __uint16_t;
type u_int32_t = __uint32_t;
type u_int64_t = __uint64_t;
type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __sigset_t {
    __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct timeval {
    tv_sec: __time_t,
    tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct timespec {
    tv_sec: __time_t,
    tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
type suseconds_t = __suseconds_t;
type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct fd_set {
    __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
type fd_mask = __fd_mask;
extern "C" {
    fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
type blksize_t = __blksize_t;
type blkcnt_t = __blkcnt_t;
type fsblkcnt_t = __fsblkcnt_t;
type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __pthread_internal_list {
    __prev: *mut __pthread_internal_list,
    __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __pthread_internal_slist {
    __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __pthread_mutex_s {
    __lock: ::std::os::raw::c_int,
    __count: ::std::os::raw::c_uint,
    __owner: ::std::os::raw::c_int,
    __nusers: ::std::os::raw::c_uint,
    __kind: ::std::os::raw::c_int,
    __spins: ::std::os::raw::c_short,
    __elision: ::std::os::raw::c_short,
    __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __pthread_rwlock_arch_t {
    __readers: ::std::os::raw::c_uint,
    __writers: ::std::os::raw::c_uint,
    __wrphase_futex: ::std::os::raw::c_uint,
    __writers_futex: ::std::os::raw::c_uint,
    __pad3: ::std::os::raw::c_uint,
    __pad4: ::std::os::raw::c_uint,
    __cur_writer: ::std::os::raw::c_int,
    __shared: ::std::os::raw::c_int,
    __rwelision: ::std::os::raw::c_schar,
    __pad1: [::std::os::raw::c_uchar; 7usize],
    __pad2: ::std::os::raw::c_ulong,
    __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
struct __pthread_cond_s {
    __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    __g_refs: [::std::os::raw::c_uint; 2usize],
    __g_size: [::std::os::raw::c_uint; 2usize],
    __g1_orig_size: ::std::os::raw::c_uint,
    __wrefs: ::std::os::raw::c_uint,
    __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
union __pthread_cond_s__bindgen_ty_1 {
    __wseq: ::std::os::raw::c_ulonglong,
    __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    __low: ::std::os::raw::c_uint,
    __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
union __pthread_cond_s__bindgen_ty_2 {
    __g1_start: ::std::os::raw::c_ulonglong,
    __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    __low: ::std::os::raw::c_uint,
    __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
type __tss_t = ::std::os::raw::c_uint;
type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __once_flag {
    __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
union pthread_mutexattr_t {
    __size: [::std::os::raw::c_char; 4usize],
    __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
union pthread_condattr_t {
    __size: [::std::os::raw::c_char; 4usize],
    __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
type pthread_key_t = ::std::os::raw::c_uint;
type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
union pthread_attr_t {
    __size: [::std::os::raw::c_char; 56usize],
    __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
union pthread_mutex_t {
    __data: __pthread_mutex_s,
    __size: [::std::os::raw::c_char; 40usize],
    __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
union pthread_cond_t {
    __data: __pthread_cond_s,
    __size: [::std::os::raw::c_char; 48usize],
    __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
union pthread_rwlock_t {
    __data: __pthread_rwlock_arch_t,
    __size: [::std::os::raw::c_char; 56usize],
    __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
union pthread_rwlockattr_t {
    __size: [::std::os::raw::c_char; 8usize],
    __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
union pthread_barrier_t {
    __size: [::std::os::raw::c_char; 32usize],
    __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
union pthread_barrierattr_t {
    __size: [::std::os::raw::c_char; 4usize],
    __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct tm {
    tm_sec: ::std::os::raw::c_int,
    tm_min: ::std::os::raw::c_int,
    tm_hour: ::std::os::raw::c_int,
    tm_mday: ::std::os::raw::c_int,
    tm_mon: ::std::os::raw::c_int,
    tm_year: ::std::os::raw::c_int,
    tm_wday: ::std::os::raw::c_int,
    tm_yday: ::std::os::raw::c_int,
    tm_isdst: ::std::os::raw::c_int,
    tm_gmtoff: ::std::os::raw::c_long,
    tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct itimerspec {
    it_interval: timespec,
    it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __locale_struct {
    __locales: [*mut __locale_data; 13usize],
    __ctype_b: *const ::std::os::raw::c_ushort,
    __ctype_tolower: *const ::std::os::raw::c_int,
    __ctype_toupper: *const ::std::os::raw::c_int,
    __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
type __locale_t = *mut __locale_struct;
type locale_t = __locale_t;
extern "C" {
    fn clock() -> clock_t;
}
extern "C" {
    fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    fn tzset();
}
extern "C" {
    static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const sg_error_SG_ERROR_NONE: sg_error = 0;
pub const sg_error_SG_ERROR_INVALID_ARGUMENT: sg_error = 1;
pub const sg_error_SG_ERROR_ASPRINTF: sg_error = 2;
pub const sg_error_SG_ERROR_SPRINTF: sg_error = 3;
pub const sg_error_SG_ERROR_DEVICES: sg_error = 4;
pub const sg_error_SG_ERROR_DEVSTAT_GETDEVS: sg_error = 5;
pub const sg_error_SG_ERROR_DEVSTAT_SELECTDEVS: sg_error = 6;
pub const sg_error_SG_ERROR_DISKINFO: sg_error = 7;
pub const sg_error_SG_ERROR_ENOENT: sg_error = 8;
pub const sg_error_SG_ERROR_GETIFADDRS: sg_error = 9;
pub const sg_error_SG_ERROR_GETMNTINFO: sg_error = 10;
pub const sg_error_SG_ERROR_GETPAGESIZE: sg_error = 11;
pub const sg_error_SG_ERROR_HOST: sg_error = 12;
pub const sg_error_SG_ERROR_KSTAT_DATA_LOOKUP: sg_error = 13;
pub const sg_error_SG_ERROR_KSTAT_LOOKUP: sg_error = 14;
pub const sg_error_SG_ERROR_KSTAT_OPEN: sg_error = 15;
pub const sg_error_SG_ERROR_KSTAT_READ: sg_error = 16;
pub const sg_error_SG_ERROR_KVM_GETSWAPINFO: sg_error = 17;
pub const sg_error_SG_ERROR_KVM_OPENFILES: sg_error = 18;
pub const sg_error_SG_ERROR_MALLOC: sg_error = 19;
pub const sg_error_SG_ERROR_MEMSTATUS: sg_error = 20;
pub const sg_error_SG_ERROR_OPEN: sg_error = 21;
pub const sg_error_SG_ERROR_OPENDIR: sg_error = 22;
pub const sg_error_SG_ERROR_READDIR: sg_error = 23;
pub const sg_error_SG_ERROR_PARSE: sg_error = 24;
pub const sg_error_SG_ERROR_PDHADD: sg_error = 25;
pub const sg_error_SG_ERROR_PDHCOLLECT: sg_error = 26;
pub const sg_error_SG_ERROR_PDHOPEN: sg_error = 27;
pub const sg_error_SG_ERROR_PDHREAD: sg_error = 28;
pub const sg_error_SG_ERROR_PERMISSION: sg_error = 29;
pub const sg_error_SG_ERROR_PSTAT: sg_error = 30;
pub const sg_error_SG_ERROR_SETEGID: sg_error = 31;
pub const sg_error_SG_ERROR_SETEUID: sg_error = 32;
pub const sg_error_SG_ERROR_SETMNTENT: sg_error = 33;
pub const sg_error_SG_ERROR_SOCKET: sg_error = 34;
pub const sg_error_SG_ERROR_SWAPCTL: sg_error = 35;
pub const sg_error_SG_ERROR_SYSCONF: sg_error = 36;
pub const sg_error_SG_ERROR_SYSCTL: sg_error = 37;
pub const sg_error_SG_ERROR_SYSCTLBYNAME: sg_error = 38;
pub const sg_error_SG_ERROR_SYSCTLNAMETOMIB: sg_error = 39;
pub const sg_error_SG_ERROR_SYSINFO: sg_error = 40;
pub const sg_error_SG_ERROR_MACHCALL: sg_error = 41;
pub const sg_error_SG_ERROR_IOKIT: sg_error = 42;
pub const sg_error_SG_ERROR_UNAME: sg_error = 43;
pub const sg_error_SG_ERROR_UNSUPPORTED: sg_error = 44;
pub const sg_error_SG_ERROR_XSW_VER_MISMATCH: sg_error = 45;
pub const sg_error_SG_ERROR_GETMSG: sg_error = 46;
pub const sg_error_SG_ERROR_PUTMSG: sg_error = 47;
pub const sg_error_SG_ERROR_INITIALISATION: sg_error = 48;
pub const sg_error_SG_ERROR_MUTEX_LOCK: sg_error = 49;
pub const sg_error_SG_ERROR_MUTEX_UNLOCK: sg_error = 50;
pub type sg_error = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_error_details {
    pub error: sg_error,
    pub errno_value: ::std::os::raw::c_int,
    pub error_arg: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sg_error_details() {
    assert_eq!(
        ::std::mem::size_of::<sg_error_details>(),
        16usize,
        concat!("Size of: ", stringify!(sg_error_details))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_error_details>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_error_details))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_error_details>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_error_details),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_error_details>())).errno_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_error_details),
            "::",
            stringify!(errno_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_error_details>())).error_arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_error_details),
            "::",
            stringify!(error_arg)
        )
    );
}
extern "C" {
    pub fn sg_get_error() -> sg_error;
}
extern "C" {
    pub fn sg_get_error_arg() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sg_get_error_errno() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_get_error_details(err_details: *mut sg_error_details) -> sg_error;
}
extern "C" {
    pub fn sg_str_error(code: sg_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sg_strperror(
        buf: *mut *mut ::std::os::raw::c_char,
        err_details: *const sg_error_details,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sg_init(ignore_init_errors: ::std::os::raw::c_int) -> sg_error;
}
extern "C" {
    pub fn sg_snapshot() -> sg_error;
}
extern "C" {
    pub fn sg_shutdown() -> sg_error;
}
extern "C" {
    pub fn sg_drop_privileges() -> sg_error;
}
extern "C" {
    pub fn sg_get_nelements(data: *const ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn sg_free_stats_buf(data: *mut ::std::os::raw::c_void) -> sg_error;
}
extern "C" {
    pub fn sg_lock_mutex(mutex_name: *const ::std::os::raw::c_char) -> sg_error;
}
extern "C" {
    pub fn sg_unlock_mutex(mutex_name: *const ::std::os::raw::c_char) -> sg_error;
}
pub const sg_host_state_sg_unknown_configuration: sg_host_state = 0;
pub const sg_host_state_sg_physical_host: sg_host_state = 1;
pub const sg_host_state_sg_virtual_machine: sg_host_state = 2;
pub const sg_host_state_sg_paravirtual_machine: sg_host_state = 3;
pub const sg_host_state_sg_hardware_virtualized: sg_host_state = 4;
pub type sg_host_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_host_info {
    pub os_name: *mut ::std::os::raw::c_char,
    pub os_release: *mut ::std::os::raw::c_char,
    pub os_version: *mut ::std::os::raw::c_char,
    pub platform: *mut ::std::os::raw::c_char,
    pub hostname: *mut ::std::os::raw::c_char,
    pub bitwidth: ::std::os::raw::c_uint,
    pub host_state: sg_host_state,
    pub ncpus: ::std::os::raw::c_uint,
    pub maxcpus: ::std::os::raw::c_uint,
    pub uptime: time_t,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_host_info() {
    assert_eq!(
        ::std::mem::size_of::<sg_host_info>(),
        72usize,
        concat!("Size of: ", stringify!(sg_host_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_host_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_host_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).os_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(os_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).os_release as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(os_release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).os_version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(os_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).platform as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(platform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).hostname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(hostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).bitwidth as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(bitwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).host_state as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(host_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).ncpus as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(ncpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).maxcpus as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(maxcpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).uptime as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(uptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).systime as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_host_info(entries: *mut size_t) -> *mut sg_host_info;
}
extern "C" {
    pub fn sg_get_host_info_r(entries: *mut size_t) -> *mut sg_host_info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_cpu_stats {
    pub user: ::std::os::raw::c_ulonglong,
    pub kernel: ::std::os::raw::c_ulonglong,
    pub idle: ::std::os::raw::c_ulonglong,
    pub iowait: ::std::os::raw::c_ulonglong,
    pub swap: ::std::os::raw::c_ulonglong,
    pub nice: ::std::os::raw::c_ulonglong,
    pub total: ::std::os::raw::c_ulonglong,
    pub context_switches: ::std::os::raw::c_ulonglong,
    pub voluntary_context_switches: ::std::os::raw::c_ulonglong,
    pub involuntary_context_switches: ::std::os::raw::c_ulonglong,
    pub syscalls: ::std::os::raw::c_ulonglong,
    pub interrupts: ::std::os::raw::c_ulonglong,
    pub soft_interrupts: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_cpu_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_cpu_stats>(),
        112usize,
        concat!("Size of: ", stringify!(sg_cpu_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_cpu_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_cpu_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).kernel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(kernel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).idle as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(idle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).iowait as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(iowait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).swap as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(swap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).nice as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(nice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).total as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).context_switches as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(context_switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_cpu_stats>())).voluntary_context_switches as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(voluntary_context_switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_cpu_stats>())).involuntary_context_switches as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(involuntary_context_switches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).syscalls as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(syscalls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).interrupts as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(interrupts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).soft_interrupts as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(soft_interrupts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).systime as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_cpu_stats(entries: *mut size_t) -> *mut sg_cpu_stats;
}
extern "C" {
    pub fn sg_get_cpu_stats_diff(entries: *mut size_t) -> *mut sg_cpu_stats;
}
extern "C" {
    pub fn sg_get_cpu_stats_r(entries: *mut size_t) -> *mut sg_cpu_stats;
}
extern "C" {
    pub fn sg_get_cpu_stats_diff_between(
        cpu_now: *const sg_cpu_stats,
        cpu_last: *const sg_cpu_stats,
        entries: *mut size_t,
    ) -> *mut sg_cpu_stats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_cpu_percents {
    pub user: f64,
    pub kernel: f64,
    pub idle: f64,
    pub iowait: f64,
    pub swap: f64,
    pub nice: f64,
    pub time_taken: time_t,
}
#[test]
fn bindgen_test_layout_sg_cpu_percents() {
    assert_eq!(
        ::std::mem::size_of::<sg_cpu_percents>(),
        56usize,
        concat!("Size of: ", stringify!(sg_cpu_percents))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_cpu_percents>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_cpu_percents))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).kernel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(kernel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).idle as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(idle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).iowait as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(iowait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).swap as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(swap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).nice as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(nice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).time_taken as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(time_taken)
        )
    );
}
pub const sg_cpu_percent_source_sg_entire_cpu_percent: sg_cpu_percent_source = 0;
pub const sg_cpu_percent_source_sg_last_diff_cpu_percent: sg_cpu_percent_source = 1;
pub const sg_cpu_percent_source_sg_new_diff_cpu_percent: sg_cpu_percent_source = 2;
pub type sg_cpu_percent_source = ::std::os::raw::c_uint;
extern "C" {
    pub fn sg_get_cpu_percents_of(
        cps: sg_cpu_percent_source,
        entries: *mut size_t,
    ) -> *mut sg_cpu_percents;
}
extern "C" {
    pub fn sg_get_cpu_percents_r(
        whereof: *const sg_cpu_stats,
        entries: *mut size_t,
    ) -> *mut sg_cpu_percents;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mem_stats {
    pub total: ::std::os::raw::c_ulonglong,
    pub free: ::std::os::raw::c_ulonglong,
    pub used: ::std::os::raw::c_ulonglong,
    pub cache: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_mem_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_mem_stats>(),
        40usize,
        concat!("Size of: ", stringify!(sg_mem_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_mem_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_mem_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_mem_stats>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mem_stats),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_mem_stats>())).free as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mem_stats),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_mem_stats>())).used as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mem_stats),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_mem_stats>())).cache as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mem_stats),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_mem_stats>())).systime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mem_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_mem_stats(entries: *mut size_t) -> *mut sg_mem_stats;
}
extern "C" {
    pub fn sg_get_mem_stats_r(entries: *mut size_t) -> *mut sg_mem_stats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_load_stats {
    pub min1: f64,
    pub min5: f64,
    pub min15: f64,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_load_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_load_stats>(),
        32usize,
        concat!("Size of: ", stringify!(sg_load_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_load_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_load_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_load_stats>())).min1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_load_stats),
            "::",
            stringify!(min1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_load_stats>())).min5 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_load_stats),
            "::",
            stringify!(min5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_load_stats>())).min15 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_load_stats),
            "::",
            stringify!(min15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_load_stats>())).systime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_load_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_load_stats(entries: *mut size_t) -> *mut sg_load_stats;
}
extern "C" {
    pub fn sg_get_load_stats_r(entries: *mut size_t) -> *mut sg_load_stats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_user_stats {
    pub login_name: *mut ::std::os::raw::c_char,
    pub record_id: *mut ::std::os::raw::c_char,
    pub record_id_size: size_t,
    pub device: *mut ::std::os::raw::c_char,
    pub hostname: *mut ::std::os::raw::c_char,
    pub pid: pid_t,
    pub login_time: time_t,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_user_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_user_stats>(),
        64usize,
        concat!("Size of: ", stringify!(sg_user_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_user_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_user_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).login_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(login_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).record_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(record_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).record_id_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(record_id_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).device as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).hostname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(hostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).pid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).login_time as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(login_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).systime as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_user_stats(entries: *mut size_t) -> *mut sg_user_stats;
}
extern "C" {
    pub fn sg_get_user_stats_r(entries: *mut size_t) -> *mut sg_user_stats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_swap_stats {
    pub total: ::std::os::raw::c_ulonglong,
    pub used: ::std::os::raw::c_ulonglong,
    pub free: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_swap_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_swap_stats>(),
        32usize,
        concat!("Size of: ", stringify!(sg_swap_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_swap_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_swap_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_swap_stats>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_swap_stats),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_swap_stats>())).used as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_swap_stats),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_swap_stats>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_swap_stats),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_swap_stats>())).systime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_swap_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_swap_stats(entries: *mut size_t) -> *mut sg_swap_stats;
}
extern "C" {
    pub fn sg_get_swap_stats_r(entries: *mut size_t) -> *mut sg_swap_stats;
}
pub const sg_fs_device_type_sg_fs_unknown: sg_fs_device_type = 0;
pub const sg_fs_device_type_sg_fs_regular: sg_fs_device_type = 1;
pub const sg_fs_device_type_sg_fs_special: sg_fs_device_type = 2;
pub const sg_fs_device_type_sg_fs_loopback: sg_fs_device_type = 4;
pub const sg_fs_device_type_sg_fs_remote: sg_fs_device_type = 8;
pub const sg_fs_device_type_sg_fs_local: sg_fs_device_type = 3;
pub const sg_fs_device_type_sg_fs_alltypes: sg_fs_device_type = 15;
pub type sg_fs_device_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_fs_stats {
    pub device_name: *mut ::std::os::raw::c_char,
    pub device_canonical: *mut ::std::os::raw::c_char,
    pub fs_type: *mut ::std::os::raw::c_char,
    pub mnt_point: *mut ::std::os::raw::c_char,
    pub device_type: sg_fs_device_type,
    pub size: ::std::os::raw::c_ulonglong,
    pub used: ::std::os::raw::c_ulonglong,
    pub free: ::std::os::raw::c_ulonglong,
    pub avail: ::std::os::raw::c_ulonglong,
    pub total_inodes: ::std::os::raw::c_ulonglong,
    pub used_inodes: ::std::os::raw::c_ulonglong,
    pub free_inodes: ::std::os::raw::c_ulonglong,
    pub avail_inodes: ::std::os::raw::c_ulonglong,
    pub io_size: ::std::os::raw::c_ulonglong,
    pub block_size: ::std::os::raw::c_ulonglong,
    pub total_blocks: ::std::os::raw::c_ulonglong,
    pub free_blocks: ::std::os::raw::c_ulonglong,
    pub used_blocks: ::std::os::raw::c_ulonglong,
    pub avail_blocks: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_fs_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_fs_stats>(),
        160usize,
        concat!("Size of: ", stringify!(sg_fs_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_fs_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_fs_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).device_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(device_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).device_canonical as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(device_canonical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).fs_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(fs_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).mnt_point as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(mnt_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).device_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(device_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).used as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).free as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).avail as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(avail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).total_inodes as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(total_inodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).used_inodes as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(used_inodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).free_inodes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(free_inodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).avail_inodes as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(avail_inodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).io_size as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(io_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).block_size as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).total_blocks as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(total_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).free_blocks as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(free_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).used_blocks as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(used_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).avail_blocks as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(avail_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).systime as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_valid_filesystems(entries: *mut size_t) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sg_set_valid_filesystems(valid_fs: *mut *const ::std::os::raw::c_char) -> sg_error;
}
extern "C" {
    pub fn sg_get_fs_stats(entries: *mut size_t) -> *mut sg_fs_stats;
}
extern "C" {
    pub fn sg_get_fs_stats_r(entries: *mut size_t) -> *mut sg_fs_stats;
}
extern "C" {
    pub fn sg_get_fs_stats_diff(entries: *mut size_t) -> *mut sg_fs_stats;
}
extern "C" {
    pub fn sg_get_fs_stats_diff_between(
        cur: *const sg_fs_stats,
        last: *const sg_fs_stats,
        entries: *mut size_t,
    ) -> *mut sg_fs_stats;
}
extern "C" {
    pub fn sg_fs_compare_device_name(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_fs_compare_mnt_point(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_disk_io_stats {
    pub disk_name: *mut ::std::os::raw::c_char,
    pub read_bytes: ::std::os::raw::c_ulonglong,
    pub write_bytes: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_disk_io_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_disk_io_stats>(),
        32usize,
        concat!("Size of: ", stringify!(sg_disk_io_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_disk_io_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_disk_io_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_disk_io_stats>())).disk_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_disk_io_stats),
            "::",
            stringify!(disk_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_disk_io_stats>())).read_bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_disk_io_stats),
            "::",
            stringify!(read_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_disk_io_stats>())).write_bytes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_disk_io_stats),
            "::",
            stringify!(write_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_disk_io_stats>())).systime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_disk_io_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_disk_io_stats(entries: *mut size_t) -> *mut sg_disk_io_stats;
}
extern "C" {
    pub fn sg_get_disk_io_stats_r(entries: *mut size_t) -> *mut sg_disk_io_stats;
}
extern "C" {
    pub fn sg_get_disk_io_stats_diff(entries: *mut size_t) -> *mut sg_disk_io_stats;
}
extern "C" {
    pub fn sg_get_disk_io_stats_diff_between(
        cur: *const sg_disk_io_stats,
        last: *const sg_disk_io_stats,
        entries: *mut size_t,
    ) -> *mut sg_disk_io_stats;
}
extern "C" {
    pub fn sg_disk_io_compare_name(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_disk_io_compare_traffic(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_network_io_stats {
    pub interface_name: *mut ::std::os::raw::c_char,
    pub tx: ::std::os::raw::c_ulonglong,
    pub rx: ::std::os::raw::c_ulonglong,
    pub ipackets: ::std::os::raw::c_ulonglong,
    pub opackets: ::std::os::raw::c_ulonglong,
    pub ierrors: ::std::os::raw::c_ulonglong,
    pub oerrors: ::std::os::raw::c_ulonglong,
    pub collisions: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_network_io_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_network_io_stats>(),
        72usize,
        concat!("Size of: ", stringify!(sg_network_io_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_network_io_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_network_io_stats))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_network_io_stats>())).interface_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(interface_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).tx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).rx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).ipackets as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(ipackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).opackets as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(opackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).ierrors as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(ierrors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).oerrors as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(oerrors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).collisions as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(collisions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).systime as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_network_io_stats(entries: *mut size_t) -> *mut sg_network_io_stats;
}
extern "C" {
    pub fn sg_get_network_io_stats_r(entries: *mut size_t) -> *mut sg_network_io_stats;
}
extern "C" {
    pub fn sg_get_network_io_stats_diff(entries: *mut size_t) -> *mut sg_network_io_stats;
}
extern "C" {
    pub fn sg_get_network_io_stats_diff_between(
        cur: *const sg_network_io_stats,
        last: *const sg_network_io_stats,
        entries: *mut size_t,
    ) -> *mut sg_network_io_stats;
}
extern "C" {
    pub fn sg_network_io_compare_name(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const sg_iface_duplex_SG_IFACE_DUPLEX_FULL: sg_iface_duplex = 0;
pub const sg_iface_duplex_SG_IFACE_DUPLEX_HALF: sg_iface_duplex = 1;
pub const sg_iface_duplex_SG_IFACE_DUPLEX_UNKNOWN: sg_iface_duplex = 2;
pub type sg_iface_duplex = ::std::os::raw::c_uint;
pub const sg_iface_updown_SG_IFACE_DOWN: sg_iface_updown = 0;
pub const sg_iface_updown_SG_IFACE_UP: sg_iface_updown = 1;
pub type sg_iface_updown = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_network_iface_stats {
    pub interface_name: *mut ::std::os::raw::c_char,
    pub speed: ::std::os::raw::c_ulonglong,
    pub factor: ::std::os::raw::c_ulonglong,
    pub duplex: sg_iface_duplex,
    pub up: sg_iface_updown,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_network_iface_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_network_iface_stats>(),
        40usize,
        concat!("Size of: ", stringify!(sg_network_iface_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_network_iface_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_network_iface_stats))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_network_iface_stats>())).interface_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(interface_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_iface_stats>())).speed as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_iface_stats>())).factor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_iface_stats>())).duplex as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(duplex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_iface_stats>())).up as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_iface_stats>())).systime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_network_iface_stats(entries: *mut size_t) -> *mut sg_network_iface_stats;
}
extern "C" {
    pub fn sg_get_network_iface_stats_r(entries: *mut size_t) -> *mut sg_network_iface_stats;
}
extern "C" {
    pub fn sg_network_iface_compare_name(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_page_stats {
    pub pages_pagein: ::std::os::raw::c_ulonglong,
    pub pages_pageout: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_page_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_page_stats>(),
        24usize,
        concat!("Size of: ", stringify!(sg_page_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_page_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_page_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_page_stats>())).pages_pagein as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_page_stats),
            "::",
            stringify!(pages_pagein)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_page_stats>())).pages_pageout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_page_stats),
            "::",
            stringify!(pages_pageout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_page_stats>())).systime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_page_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_page_stats(entries: *mut size_t) -> *mut sg_page_stats;
}
extern "C" {
    pub fn sg_get_page_stats_r(entries: *mut size_t) -> *mut sg_page_stats;
}
extern "C" {
    pub fn sg_get_page_stats_diff(entries: *mut size_t) -> *mut sg_page_stats;
}
extern "C" {
    pub fn sg_get_page_stats_diff_between(
        now: *const sg_page_stats,
        last: *const sg_page_stats,
        entries: *mut size_t,
    ) -> *mut sg_page_stats;
}
pub const sg_process_state_SG_PROCESS_STATE_RUNNING: sg_process_state = 0;
pub const sg_process_state_SG_PROCESS_STATE_SLEEPING: sg_process_state = 1;
pub const sg_process_state_SG_PROCESS_STATE_STOPPED: sg_process_state = 2;
pub const sg_process_state_SG_PROCESS_STATE_ZOMBIE: sg_process_state = 3;
pub const sg_process_state_SG_PROCESS_STATE_UNKNOWN: sg_process_state = 4;
pub type sg_process_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_process_stats {
    pub process_name: *mut ::std::os::raw::c_char,
    pub proctitle: *mut ::std::os::raw::c_char,
    pub pid: pid_t,
    pub parent: pid_t,
    pub pgid: pid_t,
    pub sessid: pid_t,
    pub uid: uid_t,
    pub euid: uid_t,
    pub gid: gid_t,
    pub egid: gid_t,
    pub context_switches: ::std::os::raw::c_ulonglong,
    pub voluntary_context_switches: ::std::os::raw::c_ulonglong,
    pub involuntary_context_switches: ::std::os::raw::c_ulonglong,
    pub proc_size: ::std::os::raw::c_ulonglong,
    pub proc_resident: ::std::os::raw::c_ulonglong,
    pub start_time: time_t,
    pub time_spent: time_t,
    pub cpu_percent: f64,
    pub nice: ::std::os::raw::c_int,
    pub state: sg_process_state,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_process_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_process_stats>(),
        128usize,
        concat!("Size of: ", stringify!(sg_process_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_process_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_process_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).process_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(process_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).proctitle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(proctitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).parent as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).pgid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(pgid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).sessid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(sessid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).uid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).euid as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(euid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).gid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).egid as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(egid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_process_stats>())).context_switches as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(context_switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_process_stats>())).voluntary_context_switches as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(voluntary_context_switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_process_stats>())).involuntary_context_switches as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(involuntary_context_switches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).proc_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(proc_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).proc_resident as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(proc_resident)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).start_time as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).time_spent as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(time_spent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).cpu_percent as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(cpu_percent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).nice as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(nice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).state as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).systime as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_process_stats(entries: *mut size_t) -> *mut sg_process_stats;
}
extern "C" {
    pub fn sg_get_process_stats_r(entries: *mut size_t) -> *mut sg_process_stats;
}
extern "C" {
    pub fn sg_process_compare_name(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_pid(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_uid(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_gid(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_size(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_res(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_cpu(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_time(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_process_count {
    pub total: ::std::os::raw::c_ulonglong,
    pub running: ::std::os::raw::c_ulonglong,
    pub sleeping: ::std::os::raw::c_ulonglong,
    pub stopped: ::std::os::raw::c_ulonglong,
    pub zombie: ::std::os::raw::c_ulonglong,
    pub unknown: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_process_count() {
    assert_eq!(
        ::std::mem::size_of::<sg_process_count>(),
        56usize,
        concat!("Size of: ", stringify!(sg_process_count))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_process_count>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_process_count))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).running as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).sleeping as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(sleeping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).stopped as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(stopped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).zombie as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(zombie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).unknown as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).systime as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(systime)
        )
    );
}
pub const sg_process_count_source_sg_entire_process_count: sg_process_count_source = 0;
pub const sg_process_count_source_sg_last_process_count: sg_process_count_source = 1;
pub type sg_process_count_source = ::std::os::raw::c_uint;
extern "C" {
    pub fn sg_get_process_count_of(pcs: sg_process_count_source) -> *mut sg_process_count;
}
extern "C" {
    pub fn sg_get_process_count_r(whereof: *const sg_process_stats) -> *mut sg_process_count;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __locale_data {
    _address: u8,
}
