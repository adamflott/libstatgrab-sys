/* automatically generated by rust-bindgen 0.59.2 */

pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __pid_t = ::std::os::raw::c_int;
pub type __time_t = ::std::os::raw::c_long;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type time_t = __time_t;
pub type size_t = ::std::os::raw::c_ulong;
pub const sg_error_SG_ERROR_NONE: sg_error = 0;
pub const sg_error_SG_ERROR_INVALID_ARGUMENT: sg_error = 1;
pub const sg_error_SG_ERROR_ASPRINTF: sg_error = 2;
pub const sg_error_SG_ERROR_SPRINTF: sg_error = 3;
pub const sg_error_SG_ERROR_DEVICES: sg_error = 4;
pub const sg_error_SG_ERROR_DEVSTAT_GETDEVS: sg_error = 5;
pub const sg_error_SG_ERROR_DEVSTAT_SELECTDEVS: sg_error = 6;
pub const sg_error_SG_ERROR_DISKINFO: sg_error = 7;
pub const sg_error_SG_ERROR_ENOENT: sg_error = 8;
pub const sg_error_SG_ERROR_GETIFADDRS: sg_error = 9;
pub const sg_error_SG_ERROR_GETMNTINFO: sg_error = 10;
pub const sg_error_SG_ERROR_GETPAGESIZE: sg_error = 11;
pub const sg_error_SG_ERROR_HOST: sg_error = 12;
pub const sg_error_SG_ERROR_KSTAT_DATA_LOOKUP: sg_error = 13;
pub const sg_error_SG_ERROR_KSTAT_LOOKUP: sg_error = 14;
pub const sg_error_SG_ERROR_KSTAT_OPEN: sg_error = 15;
pub const sg_error_SG_ERROR_KSTAT_READ: sg_error = 16;
pub const sg_error_SG_ERROR_KVM_GETSWAPINFO: sg_error = 17;
pub const sg_error_SG_ERROR_KVM_OPENFILES: sg_error = 18;
pub const sg_error_SG_ERROR_MALLOC: sg_error = 19;
pub const sg_error_SG_ERROR_MEMSTATUS: sg_error = 20;
pub const sg_error_SG_ERROR_OPEN: sg_error = 21;
pub const sg_error_SG_ERROR_OPENDIR: sg_error = 22;
pub const sg_error_SG_ERROR_READDIR: sg_error = 23;
pub const sg_error_SG_ERROR_PARSE: sg_error = 24;
pub const sg_error_SG_ERROR_PDHADD: sg_error = 25;
pub const sg_error_SG_ERROR_PDHCOLLECT: sg_error = 26;
pub const sg_error_SG_ERROR_PDHOPEN: sg_error = 27;
pub const sg_error_SG_ERROR_PDHREAD: sg_error = 28;
pub const sg_error_SG_ERROR_PERMISSION: sg_error = 29;
pub const sg_error_SG_ERROR_PSTAT: sg_error = 30;
pub const sg_error_SG_ERROR_SETEGID: sg_error = 31;
pub const sg_error_SG_ERROR_SETEUID: sg_error = 32;
pub const sg_error_SG_ERROR_SETMNTENT: sg_error = 33;
pub const sg_error_SG_ERROR_SOCKET: sg_error = 34;
pub const sg_error_SG_ERROR_SWAPCTL: sg_error = 35;
pub const sg_error_SG_ERROR_SYSCONF: sg_error = 36;
pub const sg_error_SG_ERROR_SYSCTL: sg_error = 37;
pub const sg_error_SG_ERROR_SYSCTLBYNAME: sg_error = 38;
pub const sg_error_SG_ERROR_SYSCTLNAMETOMIB: sg_error = 39;
pub const sg_error_SG_ERROR_SYSINFO: sg_error = 40;
pub const sg_error_SG_ERROR_MACHCALL: sg_error = 41;
pub const sg_error_SG_ERROR_IOKIT: sg_error = 42;
pub const sg_error_SG_ERROR_UNAME: sg_error = 43;
pub const sg_error_SG_ERROR_UNSUPPORTED: sg_error = 44;
pub const sg_error_SG_ERROR_XSW_VER_MISMATCH: sg_error = 45;
pub const sg_error_SG_ERROR_GETMSG: sg_error = 46;
pub const sg_error_SG_ERROR_PUTMSG: sg_error = 47;
pub const sg_error_SG_ERROR_INITIALISATION: sg_error = 48;
pub const sg_error_SG_ERROR_MUTEX_LOCK: sg_error = 49;
pub const sg_error_SG_ERROR_MUTEX_UNLOCK: sg_error = 50;
pub type sg_error = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_error_details {
    pub error: sg_error,
    pub errno_value: ::std::os::raw::c_int,
    pub error_arg: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sg_error_details() {
    assert_eq!(
        ::std::mem::size_of::<sg_error_details>(),
        16usize,
        concat!("Size of: ", stringify!(sg_error_details))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_error_details>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_error_details))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_error_details>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_error_details),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_error_details>())).errno_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_error_details),
            "::",
            stringify!(errno_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_error_details>())).error_arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_error_details),
            "::",
            stringify!(error_arg)
        )
    );
}
extern "C" {
    pub fn sg_get_error() -> sg_error;
}
extern "C" {
    pub fn sg_get_error_arg() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sg_get_error_errno() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_get_error_details(err_details: *mut sg_error_details) -> sg_error;
}
extern "C" {
    pub fn sg_str_error(code: sg_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sg_strperror(
        buf: *mut *mut ::std::os::raw::c_char,
        err_details: *const sg_error_details,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sg_init(ignore_init_errors: ::std::os::raw::c_int) -> sg_error;
}
extern "C" {
    pub fn sg_snapshot() -> sg_error;
}
extern "C" {
    pub fn sg_shutdown() -> sg_error;
}
extern "C" {
    pub fn sg_drop_privileges() -> sg_error;
}
extern "C" {
    pub fn sg_get_nelements(data: *const ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn sg_free_stats_buf(data: *mut ::std::os::raw::c_void) -> sg_error;
}
extern "C" {
    pub fn sg_lock_mutex(mutex_name: *const ::std::os::raw::c_char) -> sg_error;
}
extern "C" {
    pub fn sg_unlock_mutex(mutex_name: *const ::std::os::raw::c_char) -> sg_error;
}
pub const sg_host_state_sg_unknown_configuration: sg_host_state = 0;
pub const sg_host_state_sg_physical_host: sg_host_state = 1;
pub const sg_host_state_sg_virtual_machine: sg_host_state = 2;
pub const sg_host_state_sg_paravirtual_machine: sg_host_state = 3;
pub const sg_host_state_sg_hardware_virtualized: sg_host_state = 4;
pub type sg_host_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_host_info {
    pub os_name: *mut ::std::os::raw::c_char,
    pub os_release: *mut ::std::os::raw::c_char,
    pub os_version: *mut ::std::os::raw::c_char,
    pub platform: *mut ::std::os::raw::c_char,
    pub hostname: *mut ::std::os::raw::c_char,
    pub bitwidth: ::std::os::raw::c_uint,
    pub host_state: sg_host_state,
    pub ncpus: ::std::os::raw::c_uint,
    pub maxcpus: ::std::os::raw::c_uint,
    pub uptime: time_t,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_host_info() {
    assert_eq!(
        ::std::mem::size_of::<sg_host_info>(),
        72usize,
        concat!("Size of: ", stringify!(sg_host_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_host_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_host_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).os_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(os_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).os_release as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(os_release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).os_version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(os_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).platform as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(platform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).hostname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(hostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).bitwidth as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(bitwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).host_state as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(host_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).ncpus as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(ncpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).maxcpus as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(maxcpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).uptime as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(uptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_host_info>())).systime as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_host_info),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_host_info(entries: *mut size_t) -> *mut sg_host_info;
}
extern "C" {
    pub fn sg_get_host_info_r(entries: *mut size_t) -> *mut sg_host_info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_cpu_stats {
    pub user: ::std::os::raw::c_ulonglong,
    pub kernel: ::std::os::raw::c_ulonglong,
    pub idle: ::std::os::raw::c_ulonglong,
    pub iowait: ::std::os::raw::c_ulonglong,
    pub swap: ::std::os::raw::c_ulonglong,
    pub nice: ::std::os::raw::c_ulonglong,
    pub total: ::std::os::raw::c_ulonglong,
    pub context_switches: ::std::os::raw::c_ulonglong,
    pub voluntary_context_switches: ::std::os::raw::c_ulonglong,
    pub involuntary_context_switches: ::std::os::raw::c_ulonglong,
    pub syscalls: ::std::os::raw::c_ulonglong,
    pub interrupts: ::std::os::raw::c_ulonglong,
    pub soft_interrupts: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_cpu_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_cpu_stats>(),
        112usize,
        concat!("Size of: ", stringify!(sg_cpu_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_cpu_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_cpu_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).kernel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(kernel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).idle as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(idle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).iowait as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(iowait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).swap as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(swap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).nice as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(nice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).total as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).context_switches as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(context_switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_cpu_stats>())).voluntary_context_switches as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(voluntary_context_switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_cpu_stats>())).involuntary_context_switches as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(involuntary_context_switches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).syscalls as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(syscalls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).interrupts as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(interrupts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).soft_interrupts as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(soft_interrupts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_stats>())).systime as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_cpu_stats(entries: *mut size_t) -> *mut sg_cpu_stats;
}
extern "C" {
    pub fn sg_get_cpu_stats_diff(entries: *mut size_t) -> *mut sg_cpu_stats;
}
extern "C" {
    pub fn sg_get_cpu_stats_r(entries: *mut size_t) -> *mut sg_cpu_stats;
}
extern "C" {
    pub fn sg_get_cpu_stats_diff_between(
        cpu_now: *const sg_cpu_stats,
        cpu_last: *const sg_cpu_stats,
        entries: *mut size_t,
    ) -> *mut sg_cpu_stats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_cpu_percents {
    pub user: f64,
    pub kernel: f64,
    pub idle: f64,
    pub iowait: f64,
    pub swap: f64,
    pub nice: f64,
    pub time_taken: time_t,
}
#[test]
fn bindgen_test_layout_sg_cpu_percents() {
    assert_eq!(
        ::std::mem::size_of::<sg_cpu_percents>(),
        56usize,
        concat!("Size of: ", stringify!(sg_cpu_percents))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_cpu_percents>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_cpu_percents))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).kernel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(kernel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).idle as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(idle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).iowait as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(iowait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).swap as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(swap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).nice as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(nice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_cpu_percents>())).time_taken as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_cpu_percents),
            "::",
            stringify!(time_taken)
        )
    );
}
pub const sg_cpu_percent_source_sg_entire_cpu_percent: sg_cpu_percent_source = 0;
pub const sg_cpu_percent_source_sg_last_diff_cpu_percent: sg_cpu_percent_source = 1;
pub const sg_cpu_percent_source_sg_new_diff_cpu_percent: sg_cpu_percent_source = 2;
pub type sg_cpu_percent_source = ::std::os::raw::c_uint;
extern "C" {
    pub fn sg_get_cpu_percents_of(
        cps: sg_cpu_percent_source,
        entries: *mut size_t,
    ) -> *mut sg_cpu_percents;
}
extern "C" {
    pub fn sg_get_cpu_percents_r(
        whereof: *const sg_cpu_stats,
        entries: *mut size_t,
    ) -> *mut sg_cpu_percents;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mem_stats {
    pub total: ::std::os::raw::c_ulonglong,
    pub free: ::std::os::raw::c_ulonglong,
    pub used: ::std::os::raw::c_ulonglong,
    pub cache: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_mem_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_mem_stats>(),
        40usize,
        concat!("Size of: ", stringify!(sg_mem_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_mem_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_mem_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_mem_stats>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mem_stats),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_mem_stats>())).free as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mem_stats),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_mem_stats>())).used as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mem_stats),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_mem_stats>())).cache as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mem_stats),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_mem_stats>())).systime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mem_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_mem_stats(entries: *mut size_t) -> *mut sg_mem_stats;
}
extern "C" {
    pub fn sg_get_mem_stats_r(entries: *mut size_t) -> *mut sg_mem_stats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_load_stats {
    pub min1: f64,
    pub min5: f64,
    pub min15: f64,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_load_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_load_stats>(),
        32usize,
        concat!("Size of: ", stringify!(sg_load_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_load_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_load_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_load_stats>())).min1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_load_stats),
            "::",
            stringify!(min1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_load_stats>())).min5 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_load_stats),
            "::",
            stringify!(min5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_load_stats>())).min15 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_load_stats),
            "::",
            stringify!(min15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_load_stats>())).systime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_load_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_load_stats(entries: *mut size_t) -> *mut sg_load_stats;
}
extern "C" {
    pub fn sg_get_load_stats_r(entries: *mut size_t) -> *mut sg_load_stats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_user_stats {
    pub login_name: *mut ::std::os::raw::c_char,
    pub record_id: *mut ::std::os::raw::c_char,
    pub record_id_size: size_t,
    pub device: *mut ::std::os::raw::c_char,
    pub hostname: *mut ::std::os::raw::c_char,
    pub pid: pid_t,
    pub login_time: time_t,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_user_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_user_stats>(),
        64usize,
        concat!("Size of: ", stringify!(sg_user_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_user_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_user_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).login_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(login_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).record_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(record_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).record_id_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(record_id_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).device as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).hostname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(hostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).pid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).login_time as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(login_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_user_stats>())).systime as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_user_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_user_stats(entries: *mut size_t) -> *mut sg_user_stats;
}
extern "C" {
    pub fn sg_get_user_stats_r(entries: *mut size_t) -> *mut sg_user_stats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_swap_stats {
    pub total: ::std::os::raw::c_ulonglong,
    pub used: ::std::os::raw::c_ulonglong,
    pub free: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_swap_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_swap_stats>(),
        32usize,
        concat!("Size of: ", stringify!(sg_swap_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_swap_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_swap_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_swap_stats>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_swap_stats),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_swap_stats>())).used as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_swap_stats),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_swap_stats>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_swap_stats),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_swap_stats>())).systime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_swap_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_swap_stats(entries: *mut size_t) -> *mut sg_swap_stats;
}
extern "C" {
    pub fn sg_get_swap_stats_r(entries: *mut size_t) -> *mut sg_swap_stats;
}
pub const sg_fs_device_type_sg_fs_unknown: sg_fs_device_type = 0;
pub const sg_fs_device_type_sg_fs_regular: sg_fs_device_type = 1;
pub const sg_fs_device_type_sg_fs_special: sg_fs_device_type = 2;
pub const sg_fs_device_type_sg_fs_loopback: sg_fs_device_type = 4;
pub const sg_fs_device_type_sg_fs_remote: sg_fs_device_type = 8;
pub const sg_fs_device_type_sg_fs_local: sg_fs_device_type = 3;
pub const sg_fs_device_type_sg_fs_alltypes: sg_fs_device_type = 15;
pub type sg_fs_device_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_fs_stats {
    pub device_name: *mut ::std::os::raw::c_char,
    pub device_canonical: *mut ::std::os::raw::c_char,
    pub fs_type: *mut ::std::os::raw::c_char,
    pub mnt_point: *mut ::std::os::raw::c_char,
    pub device_type: sg_fs_device_type,
    pub size: ::std::os::raw::c_ulonglong,
    pub used: ::std::os::raw::c_ulonglong,
    pub free: ::std::os::raw::c_ulonglong,
    pub avail: ::std::os::raw::c_ulonglong,
    pub total_inodes: ::std::os::raw::c_ulonglong,
    pub used_inodes: ::std::os::raw::c_ulonglong,
    pub free_inodes: ::std::os::raw::c_ulonglong,
    pub avail_inodes: ::std::os::raw::c_ulonglong,
    pub io_size: ::std::os::raw::c_ulonglong,
    pub block_size: ::std::os::raw::c_ulonglong,
    pub total_blocks: ::std::os::raw::c_ulonglong,
    pub free_blocks: ::std::os::raw::c_ulonglong,
    pub used_blocks: ::std::os::raw::c_ulonglong,
    pub avail_blocks: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_fs_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_fs_stats>(),
        160usize,
        concat!("Size of: ", stringify!(sg_fs_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_fs_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_fs_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).device_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(device_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).device_canonical as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(device_canonical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).fs_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(fs_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).mnt_point as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(mnt_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).device_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(device_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).used as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).free as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).avail as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(avail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).total_inodes as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(total_inodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).used_inodes as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(used_inodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).free_inodes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(free_inodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).avail_inodes as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(avail_inodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).io_size as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(io_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).block_size as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).total_blocks as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(total_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).free_blocks as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(free_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).used_blocks as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(used_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).avail_blocks as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(avail_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_fs_stats>())).systime as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_fs_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_valid_filesystems(entries: *mut size_t) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sg_set_valid_filesystems(valid_fs: *mut *const ::std::os::raw::c_char) -> sg_error;
}
extern "C" {
    pub fn sg_get_fs_stats(entries: *mut size_t) -> *mut sg_fs_stats;
}
extern "C" {
    pub fn sg_get_fs_stats_r(entries: *mut size_t) -> *mut sg_fs_stats;
}
extern "C" {
    pub fn sg_get_fs_stats_diff(entries: *mut size_t) -> *mut sg_fs_stats;
}
extern "C" {
    pub fn sg_get_fs_stats_diff_between(
        cur: *const sg_fs_stats,
        last: *const sg_fs_stats,
        entries: *mut size_t,
    ) -> *mut sg_fs_stats;
}
extern "C" {
    pub fn sg_fs_compare_device_name(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_fs_compare_mnt_point(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_disk_io_stats {
    pub disk_name: *mut ::std::os::raw::c_char,
    pub read_bytes: ::std::os::raw::c_ulonglong,
    pub write_bytes: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_disk_io_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_disk_io_stats>(),
        32usize,
        concat!("Size of: ", stringify!(sg_disk_io_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_disk_io_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_disk_io_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_disk_io_stats>())).disk_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_disk_io_stats),
            "::",
            stringify!(disk_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_disk_io_stats>())).read_bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_disk_io_stats),
            "::",
            stringify!(read_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_disk_io_stats>())).write_bytes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_disk_io_stats),
            "::",
            stringify!(write_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_disk_io_stats>())).systime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_disk_io_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_disk_io_stats(entries: *mut size_t) -> *mut sg_disk_io_stats;
}
extern "C" {
    pub fn sg_get_disk_io_stats_r(entries: *mut size_t) -> *mut sg_disk_io_stats;
}
extern "C" {
    pub fn sg_get_disk_io_stats_diff(entries: *mut size_t) -> *mut sg_disk_io_stats;
}
extern "C" {
    pub fn sg_get_disk_io_stats_diff_between(
        cur: *const sg_disk_io_stats,
        last: *const sg_disk_io_stats,
        entries: *mut size_t,
    ) -> *mut sg_disk_io_stats;
}
extern "C" {
    pub fn sg_disk_io_compare_name(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_disk_io_compare_traffic(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_network_io_stats {
    pub interface_name: *mut ::std::os::raw::c_char,
    pub tx: ::std::os::raw::c_ulonglong,
    pub rx: ::std::os::raw::c_ulonglong,
    pub ipackets: ::std::os::raw::c_ulonglong,
    pub opackets: ::std::os::raw::c_ulonglong,
    pub ierrors: ::std::os::raw::c_ulonglong,
    pub oerrors: ::std::os::raw::c_ulonglong,
    pub collisions: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_network_io_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_network_io_stats>(),
        72usize,
        concat!("Size of: ", stringify!(sg_network_io_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_network_io_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_network_io_stats))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_network_io_stats>())).interface_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(interface_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).tx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).rx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).ipackets as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(ipackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).opackets as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(opackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).ierrors as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(ierrors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).oerrors as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(oerrors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).collisions as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(collisions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_io_stats>())).systime as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_io_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_network_io_stats(entries: *mut size_t) -> *mut sg_network_io_stats;
}
extern "C" {
    pub fn sg_get_network_io_stats_r(entries: *mut size_t) -> *mut sg_network_io_stats;
}
extern "C" {
    pub fn sg_get_network_io_stats_diff(entries: *mut size_t) -> *mut sg_network_io_stats;
}
extern "C" {
    pub fn sg_get_network_io_stats_diff_between(
        cur: *const sg_network_io_stats,
        last: *const sg_network_io_stats,
        entries: *mut size_t,
    ) -> *mut sg_network_io_stats;
}
extern "C" {
    pub fn sg_network_io_compare_name(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const sg_iface_duplex_SG_IFACE_DUPLEX_FULL: sg_iface_duplex = 0;
pub const sg_iface_duplex_SG_IFACE_DUPLEX_HALF: sg_iface_duplex = 1;
pub const sg_iface_duplex_SG_IFACE_DUPLEX_UNKNOWN: sg_iface_duplex = 2;
pub type sg_iface_duplex = ::std::os::raw::c_uint;
pub const sg_iface_updown_SG_IFACE_DOWN: sg_iface_updown = 0;
pub const sg_iface_updown_SG_IFACE_UP: sg_iface_updown = 1;
pub type sg_iface_updown = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_network_iface_stats {
    pub interface_name: *mut ::std::os::raw::c_char,
    pub speed: ::std::os::raw::c_ulonglong,
    pub factor: ::std::os::raw::c_ulonglong,
    pub duplex: sg_iface_duplex,
    pub up: sg_iface_updown,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_network_iface_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_network_iface_stats>(),
        40usize,
        concat!("Size of: ", stringify!(sg_network_iface_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_network_iface_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_network_iface_stats))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_network_iface_stats>())).interface_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(interface_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_iface_stats>())).speed as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_iface_stats>())).factor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_iface_stats>())).duplex as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(duplex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_iface_stats>())).up as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_network_iface_stats>())).systime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_network_iface_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_network_iface_stats(entries: *mut size_t) -> *mut sg_network_iface_stats;
}
extern "C" {
    pub fn sg_get_network_iface_stats_r(entries: *mut size_t) -> *mut sg_network_iface_stats;
}
extern "C" {
    pub fn sg_network_iface_compare_name(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_page_stats {
    pub pages_pagein: ::std::os::raw::c_ulonglong,
    pub pages_pageout: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_page_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_page_stats>(),
        24usize,
        concat!("Size of: ", stringify!(sg_page_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_page_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_page_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_page_stats>())).pages_pagein as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_page_stats),
            "::",
            stringify!(pages_pagein)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_page_stats>())).pages_pageout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_page_stats),
            "::",
            stringify!(pages_pageout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_page_stats>())).systime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_page_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_page_stats(entries: *mut size_t) -> *mut sg_page_stats;
}
extern "C" {
    pub fn sg_get_page_stats_r(entries: *mut size_t) -> *mut sg_page_stats;
}
extern "C" {
    pub fn sg_get_page_stats_diff(entries: *mut size_t) -> *mut sg_page_stats;
}
extern "C" {
    pub fn sg_get_page_stats_diff_between(
        now: *const sg_page_stats,
        last: *const sg_page_stats,
        entries: *mut size_t,
    ) -> *mut sg_page_stats;
}
pub const sg_process_state_SG_PROCESS_STATE_RUNNING: sg_process_state = 0;
pub const sg_process_state_SG_PROCESS_STATE_SLEEPING: sg_process_state = 1;
pub const sg_process_state_SG_PROCESS_STATE_STOPPED: sg_process_state = 2;
pub const sg_process_state_SG_PROCESS_STATE_ZOMBIE: sg_process_state = 3;
pub const sg_process_state_SG_PROCESS_STATE_UNKNOWN: sg_process_state = 4;
pub type sg_process_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_process_stats {
    pub process_name: *mut ::std::os::raw::c_char,
    pub proctitle: *mut ::std::os::raw::c_char,
    pub pid: pid_t,
    pub parent: pid_t,
    pub pgid: pid_t,
    pub sessid: pid_t,
    pub uid: uid_t,
    pub euid: uid_t,
    pub gid: gid_t,
    pub egid: gid_t,
    pub context_switches: ::std::os::raw::c_ulonglong,
    pub voluntary_context_switches: ::std::os::raw::c_ulonglong,
    pub involuntary_context_switches: ::std::os::raw::c_ulonglong,
    pub proc_size: ::std::os::raw::c_ulonglong,
    pub proc_resident: ::std::os::raw::c_ulonglong,
    pub start_time: time_t,
    pub time_spent: time_t,
    pub cpu_percent: f64,
    pub nice: ::std::os::raw::c_int,
    pub state: sg_process_state,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_process_stats() {
    assert_eq!(
        ::std::mem::size_of::<sg_process_stats>(),
        128usize,
        concat!("Size of: ", stringify!(sg_process_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_process_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_process_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).process_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(process_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).proctitle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(proctitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).parent as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).pgid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(pgid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).sessid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(sessid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).uid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).euid as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(euid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).gid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).egid as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(egid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_process_stats>())).context_switches as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(context_switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_process_stats>())).voluntary_context_switches as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(voluntary_context_switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_process_stats>())).involuntary_context_switches as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(involuntary_context_switches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).proc_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(proc_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).proc_resident as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(proc_resident)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).start_time as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).time_spent as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(time_spent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).cpu_percent as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(cpu_percent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).nice as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(nice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).state as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_stats>())).systime as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_stats),
            "::",
            stringify!(systime)
        )
    );
}
extern "C" {
    pub fn sg_get_process_stats(entries: *mut size_t) -> *mut sg_process_stats;
}
extern "C" {
    pub fn sg_get_process_stats_r(entries: *mut size_t) -> *mut sg_process_stats;
}
extern "C" {
    pub fn sg_process_compare_name(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_pid(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_uid(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_gid(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_size(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_res(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_cpu(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_process_compare_time(
        va: *const ::std::os::raw::c_void,
        vb: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_process_count {
    pub total: ::std::os::raw::c_ulonglong,
    pub running: ::std::os::raw::c_ulonglong,
    pub sleeping: ::std::os::raw::c_ulonglong,
    pub stopped: ::std::os::raw::c_ulonglong,
    pub zombie: ::std::os::raw::c_ulonglong,
    pub unknown: ::std::os::raw::c_ulonglong,
    pub systime: time_t,
}
#[test]
fn bindgen_test_layout_sg_process_count() {
    assert_eq!(
        ::std::mem::size_of::<sg_process_count>(),
        56usize,
        concat!("Size of: ", stringify!(sg_process_count))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_process_count>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_process_count))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).running as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).sleeping as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(sleeping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).stopped as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(stopped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).zombie as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(zombie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).unknown as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_process_count>())).systime as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_process_count),
            "::",
            stringify!(systime)
        )
    );
}
pub const sg_process_count_source_sg_entire_process_count: sg_process_count_source = 0;
pub const sg_process_count_source_sg_last_process_count: sg_process_count_source = 1;
pub type sg_process_count_source = ::std::os::raw::c_uint;
extern "C" {
    pub fn sg_get_process_count_of(pcs: sg_process_count_source) -> *mut sg_process_count;
}
extern "C" {
    pub fn sg_get_process_count_r(whereof: *const sg_process_stats) -> *mut sg_process_count;
}
